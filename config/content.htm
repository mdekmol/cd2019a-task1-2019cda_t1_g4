<h1>簡介</h1>
<h2>組員</h2>
<p><a href="https://github.com/40623102">40623102</a> 吳柔燕          <a href="https://github.com/40623124">40623124</a> 葉修宏</p>
<p><a href="https://github.com/40623110">40623110</a> 翁俊揚          <a href="https://github.com/40623132">40623132</a> 趙家傑</p>
<p><a href="https://github.com/40623111">40623111</a> 王映捷          <a href="https://github.com/40623144">40623144</a> 林昭權</p>
<p><a href="https://github.com/40623113">40623113</a> 吳承哲          <a href="https://github.com/40623152">40623152</a> 潘季宏</p>
<p><a href="https://github.com/40623121">40623121</a> 蔡朝旭          <a href="https://github.com/40623157">40623157</a> 李昀霖</p>
<p></p>
<h1>課程內容</h1>
<h2>第一週</h2>
<h2>第二週</h2>
<h2>第三週</h2>
<h2>第四週</h2>
<h2>第五週</h2>
<p></p>
<h1>可攜系統</h1>
<h1>Ungit</h1>
<p><span>ungit 是本學期重新啟用的倉儲管理工具, 因為在 </span><a href="https://drive.google.com/file/d/1Cw8mHRcHKIZj7K7_m6x_af4vzo89539a/view?usp=sharing">kmol_2019.7z</a><span><span> </span>中並未納入, 因此使用者配置 kmol_2019 可攜系統之後, 必須再下載<span> </span></span><a href="https://drive.google.com/file/d/1G3cEZsw6d7NjqLLgu9jljVNBd6wF-ZrG/view?usp=sharing">nodejs_with_ungit.7z</a><span>, 然後再設法配置, 直到能夠用 kungit.bat 啟動</span></p>
<p><span><a href="https://github.com/FredrikNoren/ungit">https://github.com/FredrikNoren/ungit</a><span><span> </span>是一個以 node.js 編寫的 git 圖形化工具, 採用網際介面操作.</span><br/><br/><span>首先必須要先將 node.js 設為可攜, 並且在可以啟動 ungit 之後, 使用一連串的客製化處理, 讓使用者可以方便利用圖形化工具, 新增提交並推送各倉儲的改版內容</span></span></p>
<h2><span><span>配置ungit</span></span></h2>
<p><span><span><span style="background-color: #ffff00;">1.下載 ungit 與 node.js 程式碼</span><br/><br/><span>首先下載<span> </span></span><a href="https://drive.google.com/file/d/1Cw8mHRcHKIZj7K7_m6x_af4vzo89539a/view?usp=sharing">kmol_2019.7z</a><span>, 接著再下載<span> </span></span><a href="https://drive.google.com/file/d/1G3cEZsw6d7NjqLLgu9jljVNBd6wF-ZrG/view?usp=sharing">nodejs_with_ungit.7z</a><span>, 兩者分別解開壓縮檔案, 然後將 nodejs 放入 kmol_2019 的 data 目錄中.</span><br/><br/><span style="background-color: #ffff00;">2.設定命令列搜尋路徑</span><br/><br/><span>接下來設定啟動 start.bat 中的 ungit 命列列搜尋路徑</span><br/><br/></span></span></p>
<p><span><span><span><img alt="" height="114" src="/images/ungit.png" width="1452"/><br/></span></span></span></p>
<p><span><span><span><span style="background-color: #ffff00;"> 3.設定 USERPROFILE 環境變數</span><br/><br/><span>最後, 為了讓 node.js 能夠使用 y:\home 作為使用者目錄, 在 start.bat 中加入</span><br/><br/><span>set USERPROFILE=%Disk%:\home</span></span></span></span></p>
<p><span><span><span><span><img alt="" height="93" src="/images/unit home.png" width="259"/></span></span></span></span></p>
<p><span><span><span><span></span></span></span></span></p>
<h1>Git手冊</h1>
<h2>Git分支</h2>
<p>幾乎每一種版本控制系統（Version Control System，以下簡稱 VCS）都支援某種形式的分支（branch）功能， 使用分支意味著你可以從開發主線上分離開來，然後在不影響主線的情況下繼續工作。<br/>有人把 Git 的分支模型視為它的「殺手級功能」， 它有何特別之處呢？新建分支的操作幾乎可以在瞬間完成，並且一般來說切換不同分支也很快； 跟其它的 VCS 不一樣的地方是 Git 鼓勵在工作流程中頻繁地使用分支與合併（merge），即使一天之內進行許多次都沒問題。</p>
<p><span style="background-color: #ffff00;">git branch 命令</span>:建立一個新的分支這會在目前提交上新建一個指標，它並不會切換到這個分支。</p>
<p><span style="background-color: #ffff00;">git checkout 命令</span>:切換到一個已經存在的分支。</p>
<p>*切換分支會修改工作目錄裡的檔案<br/>當你在 Git 中切換分支時，工作目錄內的檔案將會被修改； 如果切換到舊分支，你的工作目錄會回復到看起來就像當初你最後一次在這個分支提交時的樣子。 如果 Git 無法很乾淨地切換過去，它就不會讓你切換過去。</p>
<p><span style="background-color: #ffff00;">git merge 命令</span>:緊急修正分支進行合併。</p>
<p></p>
<p></p>