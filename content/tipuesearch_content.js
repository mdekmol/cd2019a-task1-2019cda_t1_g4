var tipuesearch = {"pages": [{'title': '簡介', 'text': 'blogger \n', 'tags': '', 'url': '簡介.html'}, {'title': '組員', 'text': '40623102  吳柔燕\xa0 \xa0 \xa0 \xa0 \xa0\xa0 40623124  葉修宏 \n 40623110  翁俊揚\xa0 \xa0 \xa0 \xa0 \xa0\xa0 40623132  趙家傑 \n 40623111  王映捷\xa0 \xa0 \xa0 \xa0 \xa0\xa0 40623144  林昭權 \n 40623113  吳承哲\xa0 \xa0 \xa0 \xa0 \xa0\xa0 40623152  潘季宏 \n 40623121  蔡朝旭\xa0 \xa0 \xa0 \xa0 \xa0\xa0 40623157  李昀霖 \n \n', 'tags': '', 'url': '組員.html'}, {'title': '課程內容', 'text': '', 'tags': '', 'url': '課程內容.html'}, {'title': '第一週', 'text': '', 'tags': '', 'url': '第一週.html'}, {'title': '第二週', 'text': '', 'tags': '', 'url': '第二週.html'}, {'title': '第三週', 'text': '', 'tags': '', 'url': '第三週.html'}, {'title': '第四週', 'text': '', 'tags': '', 'url': '第四週.html'}, {'title': '第五週', 'text': '\n', 'tags': '', 'url': '第五週.html'}, {'title': '可攜系統', 'text': '', 'tags': '', 'url': '可攜系統.html'}, {'title': 'Ungit', 'text': 'ungit 是本學期重新啟用的倉儲管理工具, 因為在\xa0 kmol_2019.7z \xa0 中並未納入, 因此使用者配置 kmol_2019 可攜系統之後, 必須再下載 \xa0 nodejs_with_ungit.7z , 然後再設法配置, 直到能夠用 kungit.bat 啟動 \n https://github.com/FredrikNoren/ungit \xa0 是一個以 node.js 編寫的 git 圖形化工具, 採用網際介面操作. 首先必須要先將 node.js 設為可攜, 並且在可以啟動 ungit 之後, 使用一連串的客製化處理, 讓使用者可以方便利用圖形化工具, 新增提交並推送各倉儲的改版內容 \n', 'tags': '', 'url': 'Ungit.html'}, {'title': '配置ungit', 'text': '1.下載 ungit 與 node.js 程式碼 首先下載 \xa0 kmol_2019.7z , 接著再下載 \xa0 nodejs_with_ungit.7z , 兩者分別解開壓縮檔案, 然後將 nodejs 放入 kmol_2019 的 data 目錄中. 2.設定命令列搜尋路徑 接下來設定啟動 start.bat 中的 ungit 命列列搜尋路徑 \n \n \xa03.設定 USERPROFILE 環境變數 最後, 為了讓 node.js 能夠使用 y:\\home 作為使用者目錄, 在 start.bat 中加入 set USERPROFILE=%Disk%:\\home \n \n', 'tags': '', 'url': '配置ungit.html'}, {'title': '實習任務', 'text': '', 'tags': '', 'url': '實習任務.html'}, {'title': '實習任務一', 'text': '', 'tags': '', 'url': '實習任務一.html'}, {'title': '建立個人可攜系統', 'text': '組員操作影片 \n', 'tags': '', 'url': '建立個人可攜系統.html'}, {'title': '實習任務二', 'text': '翻譯 \n 研讀Git 教材重點 \n \n \n', 'tags': '', 'url': '實習任務二.html'}, {'title': 'Git手冊', 'text': '', 'tags': '', 'url': 'Git手冊.html'}, {'title': 'Git分支', 'text': '幾乎每一種版本控制系統（Version Control System，以下簡稱 VCS）都支援某種形式的分支（branch）功能， 使用分支意味著你可以從開發主線上分離開來，然後在不影響主線的情況下繼續工作。 有人把 Git 的分支模型視為它的「殺手級功能」， 它有何特別之處呢？新建分支的操作幾乎可以在瞬間完成，並且一般來說切換不同分支也很快； 跟其它的 VCS 不一樣的地方是 Git 鼓勵在工作流程中頻繁地使用分支與合併（merge），即使一天之內進行許多次都沒問題。 \n git branch 命令 :建立一個新的分支這會在目前提交上新建一個指標，它並不會切換到這個分支。 \n git checkout 命令 :切換到一個已經存在的分支。 \n *切換分支會修改工作目錄裡的檔案 當你在 Git 中切換分支時，工作目錄內的檔案將會被修改； 如果切換到舊分支，你的工作目錄會回復到看起來就像當初你最後一次在這個分支提交時的樣子。 如果 Git 無法很乾淨地切換過去，它就不會讓你切換過去。 \n git merge 命令 :緊急修正分支進行合併。 \n \n', 'tags': '', 'url': 'Git分支.html'}]};